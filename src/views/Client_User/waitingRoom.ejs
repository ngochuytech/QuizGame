<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Phòng chờ</title>
    <link rel="stylesheet" href="/css/Client_User/waitingRoom.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Chakra+Petch&display=swap" rel="stylesheet">
</head>

<body>
    <!-- Header -->
    <%- include('../utils/header.ejs'); %>

    <!-- Main-content -->
    <div class="Main-Content ">
        <!-- Sidebar -->
        <div class="Sidebar d-flex flex-column position-fixed p-2">
            <div class="overflow-auto">
                <h6>Đã tham gia (<span id="joinedCount">0</span>)</h6>
                <ul id="joinedUsers" class="list-group">
                    <li class="list-group-item"></li>
                </ul>
            </div>
        </div>
        <!-- End sidebar -->

        <!-- Content Main Exam Info -->
        <div class="Content">
            <h1 class="text-center"><%=currentExam.nameDisplay%></h1>
            <p class="text-center"> Số lượng: <%=currentExam.questions.length%> câu</p>
            <p style="margin-left: 90px;"><b>Phân loại</b></p>
            <div class="row" style="margin-left: 165px;">
                <span class="col-sm" style="color: green;">Dễ: <%=numberDiffculty.easySize%> câu</span>
                <span class="col-sm" style="color: orange;">Trung bình: <%=numberDiffculty.mediumSize%> câu</span>
                <span class="col-sm-3" style="color: red;">Khó: <%=numberDiffculty.hardSize%> câu</span>
            </div>

            <div class="description">
                <h4>Mô tả</h4>
                <div class="description-box overflow-auto">
                    <p><%=currentExam.description%></p>
                </div>
            </div>
            <div class="space" style="height: 200px;"></div>
            <div class="d-flex justify-content-end" style="margin-right: 94px;">
                <a href="/client/home/<%=currentClassID%>" style="margin-right: 20px;"><button class="btn btn-warning">Rời đi</button></a>
                <% if (currentExam.state == true && currentExam.creator?.idCreator.equals(user._id)) { %>
                    <form action="/host/cancelTheTest/<%=currentClassID%>/<%=currentExam._id%>" method="post">
                        <button class="btn btn-danger" style="margin-right: 20px;">Hủy bài thi</button>
                    </form>
                    <form action="/client/quizStart/<%=currentClassID%>/<%=currentExam._id%>" method="get" onsubmit="StartQuiz(event)">
                        <!-- <input type="hidden" id="joinedIDUsers" name="joinedIDUsers"> -->
                        <button id="startQuizBtn" class="btn btn-success" onclick="StartQuiz(event)">Bắt đầu</button>
                    </form>
                <% } %>
            </div>
        </div>
    </div>
    <!-- End main-content -->

    <!-- Socket.IO -->
    <script src="/socket.io/socket.io.js"></script>
    <script>
        let joinedUsers = [];
        const socket = io();

        // Khi người dùng vào phòng chờ
        const idUser = '<%= user._id %>';
        const username = '<%= user.nameDisplay %>'; 
        const room = '<%= currentExam._id %>';
        socket.emit('joinRoom', { idUser, username, room }); // Gửi lên server có tên sự kiện là 'JoinRoom' với tham số là idUser, username và room

        // Cập nhật danh sách người dùng đã tham gia
        socket.on('updateUserList', (users) => {
            const joinedUsersList = document.getElementById('joinedUsers');
            const joinedCount = document.getElementById('joinedCount');

            // Xóa danh sách cũ
            joinedUsersList.innerHTML = '';

            // Xóa danh sách những người tham gia cũ
            joinedUsers = [];
            // Cập nhật danh sách người tham gia
            users.forEach(user => {
                const li = document.createElement('li');
                li.classList.add('list-group-item');
                li.innerText = user.username;
                joinedUsersList.appendChild(li);
                joinedUsers.push(user.idUser);
            });

            // Cập nhật số lượng người đã tham gia
            joinedCount.innerText = users.length;
        });

        // Khi người tạo bài thi nhấn nút "Bắt đầu"
        function StartQuiz(event){
            event.preventDefault();
            // document.getElementById('joinedIDUsers').value = JSON.stringify(joinedUsers);
   
            socket.emit('quiz:redirect', {room});  // Phát sự kiện 'startQuiz' tới server
            event.target.form.submit();
        }

        // Nhận sự kiện từ server để chuyển sang trang QuizStart
        socket.on('redirectToQuiz', () => {
            window.location.href = `/client/quizStart/<%=currentClassID%>/${room}`;  // Chuyển hướng sang trang QuizStart
        });

        socket.on('error', (errorMessage) => {
            alert(errorMessage);  // Hiển thị thông báo lỗi cho người dùng
            window.location.href = '/client/home/<%=currentClassID%>'
        });
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>
